/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sprit_2;

import StudentAndTag.homeForStudentAndTag;
import forConnection.connect;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Sajee
 */
public class consecutiveParallelOverlap extends javax.swing.JFrame {
        PreparedStatement pst;
        ResultSet rs,rs2,rs3;
        connect cObj = new connect();//---create object to connect class---
        Connection conn;
        
    public consecutiveParallelOverlap() {
        initComponents();
        getData();
        getData2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        TabbedPane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableOfMain_01 = new javax.swing.JTable();
        btnAddSession = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        txtSerach = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableOfMain_02 = new javax.swing.JTable();
        txtSerach1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnParallel = new javax.swing.JButton();
        btnViewForParalllel = new javax.swing.JButton();
        cBoxDay = new javax.swing.JComboBox<>();
        cBoxTime = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableOfMain_03 = new javax.swing.JTable();
        btnViewForParalllel1 = new javax.swing.JButton();
        btnNonOverlap = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(14, 214, 175));

        TabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        TabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabbedPaneMouseClicked(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(151, 242, 151));

        tableOfMain_01.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Lecturers", "SubjectCode", "SubjectName", "Tag", "GroupId", "Room"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOfMain_01.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(tableOfMain_01);

        btnAddSession.setBackground(new java.awt.Color(255, 255, 255));
        btnAddSession.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnAddSession.setForeground(new java.awt.Color(52, 108, 28));
        btnAddSession.setText("ADD SESSION");
        btnAddSession.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(34, 139, 8), 3, true));
        btnAddSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSessionActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(23, 42, 148));
        jButton2.setText("VIEW");
        jButton2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(56, 81, 209), 3, true));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtSerach.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtSerach.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSerachKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(130, 7, 43));
        jLabel2.setText("search");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1137, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSerach, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(340, 340, 340)
                .addComponent(btnAddSession, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSerach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddSession, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(74, 74, 74))
        );

        TabbedPane.addTab("Consecutive", jPanel2);

        jPanel3.setBackground(new java.awt.Color(242, 199, 242));

        tableOfMain_02.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Lecturer_1", "Lecturer_2", "Subject Code", "Subject Name", "Tag", "GroupId", "Room"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableOfMain_02);

        txtSerach1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtSerach1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSerach1KeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(130, 7, 43));
        jLabel3.setText("search");

        btnParallel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnParallel.setForeground(new java.awt.Color(21, 145, 15));
        btnParallel.setText("Add Parallel");
        btnParallel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(6, 116, 6), 2, true));
        btnParallel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnParallel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParallelActionPerformed(evt);
            }
        });

        btnViewForParalllel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnViewForParalllel.setForeground(new java.awt.Color(7, 7, 137));
        btnViewForParalllel.setText("View");
        btnViewForParalllel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(8, 49, 153), 2, true));
        btnViewForParalllel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewForParalllel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewForParalllelActionPerformed(evt);
            }
        });

        cBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---select day---" }));
        cBoxDay.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                cBoxDayInputMethodTextChanged(evt);
            }
        });

        cBoxTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---select time---" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1137, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSerach1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cBoxDay, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cBoxTime, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(237, 237, 237)
                        .addComponent(btnParallel, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105)
                        .addComponent(btnViewForParalllel, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSerach1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cBoxDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cBoxTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnParallel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnViewForParalllel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42))
        );

        TabbedPane.addTab("Parallel", jPanel3);

        jPanel4.setBackground(new java.awt.Color(234, 234, 142));

        tableOfMain_03.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Lecturer", "SubjectCode", "SubjectName", "Tag", "GroupId", "Room"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tableOfMain_03);

        btnViewForParalllel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnViewForParalllel1.setForeground(new java.awt.Color(7, 7, 137));
        btnViewForParalllel1.setText("View");
        btnViewForParalllel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(8, 49, 153), 2, true));
        btnViewForParalllel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewForParalllel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewForParalllel1ActionPerformed(evt);
            }
        });

        btnNonOverlap.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnNonOverlap.setForeground(new java.awt.Color(23, 148, 23));
        btnNonOverlap.setText("Add Non-Overlapping");
        btnNonOverlap.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(21, 131, 20), 2, true));
        btnNonOverlap.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNonOverlap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNonOverlapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1137, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnNonOverlap, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(124, 124, 124)
                .addComponent(btnViewForParalllel1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(318, 318, 318))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNonOverlap, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewForParalllel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        TabbedPane.addTab("Non-Overlapping", jPanel4);

        jButton1.setText("Home");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(TabbedPane)
                .addGap(85, 85, 85))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewForParalllelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewForParalllelActionPerformed
        parallel parel = new parallel();
        parel.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnViewForParalllelActionPerformed
    //----Add Parallel Button----
    private void btnParallelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParallelActionPerformed
        ParallelFun(); //call method...
    }//GEN-LAST:event_btnParallelActionPerformed
        
    private void txtSerach1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSerach1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSerach1KeyReleased

    private void txtSerachKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSerachKeyReleased
        DefaultTableModel table = (DefaultTableModel) tableOfMain_01.getModel();
        String search_value = txtSerach.getText();
        TableRowSorter<DefaultTableModel> sort = new TableRowSorter<>(table);
        tableOfMain_01.setRowSorter(sort);
        sort.setRowFilter(RowFilter.regexFilter(search_value));
    }//GEN-LAST:event_txtSerachKeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        addSession  obj = new addSession();
        obj.setVisible(true);
        this.dispose();  
    }//GEN-LAST:event_jButton2ActionPerformed
    
    // ---Add Consecutive Button---
    private void btnAddSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSessionActionPerformed
        addConsecutiveFun(); //call method...

    }//GEN-LAST:event_btnAddSessionActionPerformed
       
    private void cBoxDayInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_cBoxDayInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cBoxDayInputMethodTextChanged

    private void TabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabbedPaneMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TabbedPaneMouseClicked

    private void btnViewForParalllel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewForParalllel1ActionPerformed
        nonOverlapping nonOverlap = new nonOverlapping();
        nonOverlap.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnViewForParalllel1ActionPerformed
    
    //---Non-Overlapping Button---
    private void btnNonOverlapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNonOverlapActionPerformed
        
            switch (nonOverlapFun()) 
            {
                case "added":
                    JOptionPane.showMessageDialog(null,"Non-Overlap Session Successfully Added.");
                    break;
                case "replaced":
                    JOptionPane.showMessageDialog(null,"Successfully Replaced.");
                    break;
                case "terminated":
                    JOptionPane.showMessageDialog(null,"terminated!!!");
                    break;
                default:
                    break;
            }
         
    }//GEN-LAST:event_btnNonOverlapActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        homeForStudentAndTag home = new homeForStudentAndTag();
        home.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    //----get data for Table from sprint_2 table----
    public void getData()
    {
        try {
            
            conn = cObj.getConnection();//---get connection---            
            String q_1 = " select * from sprint_2 "; //---Query-01---                       
            pst = conn.prepareStatement(q_1); //---Execute Query---
                 
            rs = pst.executeQuery();
                tableOfMain_01.setModel(DbUtils.resultSetToTableModel(rs));//---tableOfMain_01---
            rs2 = pst.executeQuery();
                tableOfMain_02.setModel(DbUtils.resultSetToTableModel(rs2)); //---tableOfMain_02---
            rs3 = pst.executeQuery();
                tableOfMain_03.setModel(DbUtils.resultSetToTableModel(rs3)); //---tableOfMain_03---    
           
            conn.close();  
        }catch (SQLException ex) {
            System.err.println("Go to an exception!!!");                              
            JOptionPane.showConfirmDialog(null, ex.getMessage());
        }
        
    }
    
    //----get data for comboBox from day_time table----
    public void getData2()
    {
       try {
                conn = cObj.getConnection();//---get connection---
                String q_2 = " select * from day_time ";
                pst = conn.prepareStatement(q_2); //---Execute Query---
             
                rs = pst.executeQuery(); //---comboBox---
                while(rs.next())
                {
                    cBoxDay.addItem(rs.getString("day"));
                    cBoxTime.addItem(rs.getString("time"));
                }
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(consecutiveParallelOverlap.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    //----Start - Add Consecutive Sessions----
    public void addConsecutiveFun(){
         try {
                String lec_1[] = new String[2], lec_2[]= new String[2],  tag[]= new String[2], sCode[]= new String[2];
                conn = cObj.getConnection(); //---get connection---
                TableModel table1 = tableOfMain_01.getModel();
                int [] Index = tableOfMain_01.getSelectedRows();
                Object [] column = new Object[8];
                            
                if(tableOfMain_01.getSelectedRowCount()== 0) //---When Click "Add-Button" Without Selected Rows--
                    JOptionPane.showMessageDialog(null,"Please select Row.");
                else 
                {   
                    if(tableOfMain_01.getSelectedRowCount() == 2)
                    {
                        //---start for loop---
                        int i=0;
                        for(i=0; i<Index.length; i++)
                        {
                            column[0] = table1.getValueAt(Index[i], 0);
                            column[1] = table1.getValueAt(Index[i], 1);
                            column[2] = table1.getValueAt(Index[i], 2);
                            column[3] = table1.getValueAt(Index[i], 3);
                            column[4] = table1.getValueAt(Index[i], 4);
                            column[5] = table1.getValueAt(Index[i], 5);
                            column[6] = table1.getValueAt(Index[i], 6);
                            column[7] = table1.getValueAt(Index[i], 7);        

                                lec_1[i]= column[1].toString();//---get lec-1 in arrays---
                                lec_2[i]= column[2].toString();//---get lec-1 in arrays---
                                tag[i]= column[5].toString();//---get tags in arrays---
                                sCode[i]= column[3].toString();//---get SubjectCode in arrays---
                                
                        }//---for loop end--- 
                        String insertRows= " insert into consecutive(Lecturers, SubjectCode, SubjectName, Tag, GroupId, Room )" +" values(?,?,?,?,?,?)";
                        pst = conn.prepareStatement(insertRows);
                        System.out.println(tag[0]+" - "+tag[1]);//---for checking-->(Which Tags is exists)---
                        if( tag[0].equals("LECTURE") && tag[1].equals("TUTORIAL") && sCode[0].equals(sCode[1]))//---Filter Tags---&---SubjectCode Check---
                        {   
                            pst.setString(1,  lec_1[0]+", "+lec_2[1]);//---Setting the names of both lecturers in the same column---
                            pst.setString(2,  column[3].toString());
                            pst.setString(3,  column[4].toString());
                            pst.setString(4,  tag[0] +", "+tag[1]);//---Setting the names of both Tags in the same column---
                            pst.setString(5,  column[6].toString());
                            pst.setString(6,  column[7].toString());
                            pst.execute(); 
                            JOptionPane.showMessageDialog(null,"Consecutive Session Successfully Added.");
                        }
                        else 
                        { 
                            if(tag[0].equals("TUTORIAL") && tag[1].equals("LECTURE") && sCode[0].equals(sCode[1]))//---Filter Tags--- &---SubjectCode Check---(**For Orders ===> LEC >>> TUTE)
                            {
                                pst.setString(1,  lec_2[1]+", "+lec_1[0]);
                                pst.setString(2,  column[3].toString());
                                pst.setString(3,  column[4].toString());
                                pst.setString(4,  tag[1] +", "+tag[0]);
                                pst.setString(5,  column[6].toString());
                                pst.setString(6,  column[7].toString());
                                pst.execute();  
                                JOptionPane.showMessageDialog(null,"Consecutive Session Successfully Added.");
                            }
                           else //---When invalid Tags Select-->> "LECTURE-LECTURE", "TUTORIAL-TUTORIAL", "LAB-LAB", "TUTORIAL-LAB", "LECTURE-LAB"
                            {
                                JOptionPane.showMessageDialog(null,"Sorry, These Sessions are will not be considered Consecutive Sessions.");
                            }
                        }
                        
                    }
                    else //---When Select More than 2 Rows OR 1 row.---
                    {
                        JOptionPane.showMessageDialog(null,"Warning!!!, Consecutive sessions consider only 'LECTURE and TUTORIAL'. So, you need to select  2 rows Only...");
                    }
                    //---close connection---
                    conn.close();
                }
  
            } catch (SQLException ex) {
                
        }
    }//----End - Add Consecutive Sessions----
    
    //----Start - Add Parallel Sessions----
    public void ParallelFun(){
        try {
                conn = cObj.getConnection(); //---get connection---
                TableModel table1 = tableOfMain_02.getModel();
                int [] Index = tableOfMain_02.getSelectedRows();
                Object [] column = new Object[8];
                            
                if(tableOfMain_02.getSelectedRowCount()== 0) //---When Click "Add-Button" Without Selected Rows--
                    JOptionPane.showMessageDialog(null,"Please select Row.");
                else 
                {   
                    if(tableOfMain_02.getSelectedRowCount() >= 2)
                    {   
                        if(cBoxDay.getSelectedItem().toString().isEmpty() || cBoxDay.getSelectedItem().toString().equals("---select day---") )
                            JOptionPane.showMessageDialog(null,"Please Select Day.");
                        else if(cBoxTime.getSelectedItem().toString().isEmpty() || cBoxTime.getSelectedItem().toString().equals("---select time---"))
                            JOptionPane.showMessageDialog(null,"Please Select Time.");
                        else
                        {
                            //---start for loop---
                            for(int i=0; i<Index.length; i++)
                            {
                                column[0] = table1.getValueAt(Index[i], 0);
                                column[1] = table1.getValueAt(Index[i], 1);
                                column[2] = table1.getValueAt(Index[i], 2);
                                column[3] = table1.getValueAt(Index[i], 3);
                                column[4] = table1.getValueAt(Index[i], 4);
                                column[5] = table1.getValueAt(Index[i], 5);
                                column[6] = table1.getValueAt(Index[i], 6);
                                column[7] = table1.getValueAt(Index[i], 7);        

                                String insertRows= " insert into parallel(Lecturer, SubjectCode, SubjectName, Tag, GroupId, Room, StartTime, Day)" +" values(?,?,?,?,?,?,?,?)";
                                pst = conn.prepareStatement(insertRows);

                                   if( column[1].toString().isEmpty())
                                    {    

                                            pst.setString(1,  column[2].toString());
                                            pst.setString(2,  column[3].toString());
                                            pst.setString(3,  column[4].toString());
                                            pst.setString(4,  column[5].toString());
                                            pst.setString(5,  column[6].toString());
                                            pst.setString(6,  column[7].toString());
                                            pst.setString(7,  cBoxTime.getSelectedItem().toString());
                                            pst.setString(8,  cBoxDay.getSelectedItem().toString());
                                            pst.execute(); 


                                    }
                                    else if(column[2].toString().isEmpty()) 
                                    { 
                                         pst.setString(1,  column[1].toString());
                                            pst.setString(2,  column[3].toString());
                                            pst.setString(3,  column[4].toString());
                                            pst.setString(4,  column[5].toString());
                                            pst.setString(5,  column[6].toString());
                                            pst.setString(6,  column[7].toString());
                                            pst.setString(7,  cBoxTime.getSelectedItem().toString());
                                            pst.setString(8,  cBoxDay.getSelectedItem().toString());
                                            pst.execute(); 

                                    }
                            }//---for loop end--- 
                            JOptionPane.showMessageDialog(null,"Parallel Session Successfully Added.");
                            conn.close(); //---close connection---
                        }
                        
                    }
                    else //---When Select More than 2 Rows OR 1 row.---
                    {
                        JOptionPane.showMessageDialog(null,"Warning!!!, You need to Select more than one row.Because This Consider Only Parallel Sessions");
                    }
                    
                }
  
            } catch (SQLException ex) {
                
        }
    }//----End - Add Parallel Sessions----
    
    //---Start - Non-Overlapping Sessions---
    public String nonOverlapFun(){
            String Status = null;
        try {
                conn = cObj.getConnection();//---get connection---
                TableModel table1 = tableOfMain_03.getModel();
                int [] Index = tableOfMain_03.getSelectedRows();
                Object [] column = new Object[8];
                            
                if(tableOfMain_03.getSelectedRowCount()== 0)
                    JOptionPane.showMessageDialog(null,"Please select Row.");
                else 
                {   
                    if(tableOfMain_03.getSelectedRowCount() >=1 )
                    {   
                        //---start for loop---
                        for(int i=0; i<Index.length; i++)
                        {
                            column[0] = table1.getValueAt(Index[i], 0);
                            column[1] = table1.getValueAt(Index[i], 1);
                            column[2] = table1.getValueAt(Index[i], 2);
                            column[3] = table1.getValueAt(Index[i], 3);
                            column[4] = table1.getValueAt(Index[i], 4);
                            column[5] = table1.getValueAt(Index[i], 5);
                            column[6] = table1.getValueAt(Index[i], 6);
                            column[7] = table1.getValueAt(Index[i], 7);
                            
                            String lec_01 = column[1].toString();
                            String lec_02 = column[2].toString();
                            String sCode = column[3].toString();
                            String tag = column[5].toString();
                            String gId = column[6].toString();
                            String room = column[7].toString();
                        
                            //-----access non-Overlapping DataBase & check already exists------
                            String checkQuery = " SELECT * FROM non_overlap WHERE Lecturer ='"+lec_01+"' OR Lecturer ='"+lec_02+"' AND SubjectCode = '"+sCode+"' AND Tag='"+tag+"' AND GroupId='"+gId+"' AND Room='"+room+"' ";
                            pst = conn.prepareStatement(checkQuery);
                            rs = pst.executeQuery();
                            if(rs.next()) //---if already exists---
                            {
                                JOptionPane.showMessageDialog(null,"This Session already exists.");
                                int response = JOptionPane.showConfirmDialog(null, "Do you want to re-place your selectd row -"+(i+1)+" ?", "Confirm", JOptionPane.YES_NO_OPTION);
                                if(response == JOptionPane.YES_OPTION)//---if click 'yes' button---
                                {
                                    if( column[1].toString().isEmpty())
                                    {   
                                        String rePlace = " Update non_overlap Set Lecturer='"+column[2].toString()+"', SubjectCode='"+column[3].toString()+"', SubjectName='"+column[4].toString()
                                            +"', Tag='"+column[5].toString()+"', GroupId='"+column[6].toString()+"', Room='"+column[7].toString()+"' Where Lecturer='"+column[2].toString()+"' AND SubjectCode='"+column[3].toString()
                                                +"' AND Tag='"+column[5].toString()+"' AND GroupId='"+column[6].toString()+"'AND Room='"+column[7].toString()+"' ";
                                        pst = conn.prepareStatement(rePlace);
                                        pst.executeUpdate();
                                    }
                                    else if(column[2].toString().isEmpty()) 
                                    { 
                                        String rePlace = " Update non_overlap Set Lecturer='"+column[1].toString()+"', SubjectCode='"+column[3].toString()+"', SubjectName='"+column[4].toString()
                                            +"', Tag='"+column[5].toString()+"', GroupId='"+column[6].toString()+"', Room='"+column[7].toString()+"' Where Lecturer='"+column[1].toString()+"' AND SubjectCode='"+column[3].toString()
                                                +"' AND Tag='"+column[5].toString()+"' AND GroupId='"+column[6].toString()+"'AND Room='"+column[7].toString()+"' ";
                                        pst = conn.prepareStatement(rePlace);
                                        pst.executeUpdate();
                                    }
                                    Status = "replaced";
                                }
                                else
                                {
                                    Status = "terminated";
                                    break;
                                }
                            }
                            else
                            {
                                String insertRows= " insert into non_overlap(Lecturer, SubjectCode, SubjectName, Tag, GroupId, Room)" +" values(?,?,?,?,?,?)";
                                pst = conn.prepareStatement(insertRows);
                                if( column[1].toString().isEmpty())
                                {   
                                        pst.setString(1, column[2].toString());
                                        pst.setString(2, column[3].toString());
                                        pst.setString(3, column[4].toString());
                                        pst.setString(4, column[5].toString());
                                        pst.setString(5, column[6].toString());
                                        pst.setString(6, column[7].toString());
                                        pst.execute(); 

                                }
                                else if(column[2].toString().isEmpty()) 
                                { 
                                        pst.setString(1, column[1].toString());
                                        pst.setString(2, column[3].toString());
                                        pst.setString(3, column[4].toString());
                                        pst.setString(4, column[5].toString());
                                        pst.setString(5, column[6].toString());
                                        pst.setString(6, column[7].toString());
                                        pst.execute(); 
                                }
                            Status = "added";
                            }
                        }//---End for loop--- 
                    } 
                    conn.close(); //---close connection---
                }
            }catch(Exception ex){
            
            }
        return Status;
    }//---End - Non-Overlapping Sessions---
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(consecutiveParallelOverlap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(consecutiveParallelOverlap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(consecutiveParallelOverlap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(consecutiveParallelOverlap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new consecutiveParallelOverlap().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JButton btnAddSession;
    private javax.swing.JButton btnNonOverlap;
    private javax.swing.JButton btnParallel;
    private javax.swing.JButton btnViewForParalllel;
    private javax.swing.JButton btnViewForParalllel1;
    private javax.swing.JComboBox<String> cBoxDay;
    private javax.swing.JComboBox<String> cBoxTime;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tableOfMain_01;
    public javax.swing.JTable tableOfMain_02;
    private javax.swing.JTable tableOfMain_03;
    private javax.swing.JTextField txtSerach;
    private javax.swing.JTextField txtSerach1;
    // End of variables declaration//GEN-END:variables

}
